// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incomeSources    IncomeSource[]
  expenses         Expense[]
  categories       Category[]
  deadlines        Deadline[]
  goals            Goal[]
  newsPreferences  NewsPreference[]
  financialReports FinancialReport[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        CategoryType
  color       String?  @default("#3B82F6")
  icon        String?
  isDefault   Boolean  @default(false)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  incomeSources IncomeSource[]
  expenses    Expense[]

  @@map("categories")
}

model IncomeSource {
  id          String        @id @default(cuid())
  name        String
  amount      Decimal       @db.Decimal(10, 2)
  frequency   IncomeFrequency
  categoryId  String?
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  isActive    Boolean       @default(true)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?     @relation(fields: [categoryId], references: [id])

  @@map("income_sources")
}

model Expense {
  id          String        @id @default(cuid())
  amount      Decimal       @db.Decimal(10, 2)
  description String?
  date        DateTime
  categoryId  String?
  isRecurring Boolean       @default(false)
  frequency   ExpenseFrequency?
  notes       String?
  receiptUrl  String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?     @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model Deadline {
  id            String           @id @default(cuid())
  title         String
  amount        Decimal          @db.Decimal(10, 2)
  dueDate       DateTime
  isRecurring   Boolean          @default(false)
  frequency     DeadlineFrequency?
  status        DeadlineStatus   @default(PENDING)
  paymentMethod String?
  accountDetails String?
  notes         String?
  userId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deadlines")
}

model Goal {
  id              String        @id @default(cuid())
  title           String
  targetAmount    Decimal       @db.Decimal(10, 2)
  currentAmount   Decimal       @db.Decimal(10, 2) @default(0)
  targetDate      DateTime?
  priority        GoalPriority  @default(MEDIUM)
  category        String?
  description     String?
  imageUrl        String?
  isActive        Boolean       @default(true)
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model NewsPreference {
  id        String   @id @default(cuid())
  keywords  String   // JSON array of keywords
  sources   String?  // JSON array of news sources
  frequency String   @default("daily") // daily, weekly, real-time
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("news_preferences")
}

model NewsCache {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  source      String
  url         String
  publishedAt DateTime
  relevance   Float    @default(0) // 0-1 score of relevance to user
  keywords    String   // JSON array of matched keywords
  createdAt   DateTime @default(now())

  @@map("news_cache")
}

model FinancialReport {
  id          String   @id @default(cuid())
  type        ReportType
  period      String   // e.g., "2024-01", "2024-Q1"
  data        String   @db.Text // JSON data of the report
  insights    String?  @db.Text // AI-generated insights
  userId      String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_reports")
}

// Enums
enum CategoryType {
  INCOME
  EXPENSE
}

enum IncomeFrequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DeadlineFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DeadlineStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}