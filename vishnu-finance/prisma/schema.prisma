generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  navigationLayout String   @default("sidebar")
  theme            String   @default("light")
  colorScheme      String   @default("default")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  currency         String   @default("INR")
  dateFormat       String   @default("DD/MM/YYYY")
  language         String   @default("en")
  timezone         String   @default("Asia/Kolkata")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  name             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  lastLogin        DateTime?
  categories       Category[]
  courseProgress   CourseProgress[]
  deadlines        Deadline[]
  expenses         Expense[]
  financialReports FinancialReport[]
  goals            Goal[]
  incomeSources    IncomeSource[]
  moduleProgress   ModuleProgress[]
  newsPreferences  NewsPreference[]
  recurringItems   RecurringItem[]
  refreshTokens    RefreshToken[]
  salaryHistories  SalaryHistory[]
  salaryStructures SalaryStructure[]
  preferences      UserPreferences?
  wishlistItems    WishlistItem[]
  upiMappings      UpiFieldMapping[]

  @@map("users")
}

model Category {
  id            String         @id @default(cuid())
  name          String
  type          CategoryType
  color         String?        @default("#3B82F6")
  icon          String?
  isDefault     Boolean        @default(false)
  userId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses      Expense[]
  incomeSources IncomeSource[]

  @@index([userId], map: "categories_userId_fkey")
  @@map("categories")
}

model IncomeSource {
  id         String          @id @default(cuid())
  name       String
  amount     Decimal         @db.Decimal(10, 2)
  frequency  IncomeFrequency
  categoryId String?
  startDate  DateTime
  endDate    DateTime?
  notes      String?
  isActive   Boolean         @default(true)
  userId     String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  store      String?
  upiId      String?
  branch     String?
  personName String?
  rawData    String?         @db.Text
  category   Category?       @relation(fields: [categoryId], references: [id])
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "income_sources_categoryId_fkey")
  @@index([userId], map: "income_sources_userId_fkey")
  @@map("income_sources")
}

model Expense {
  id          String            @id @default(cuid())
  amount      Decimal           @db.Decimal(10, 2)
  description String?
  date        DateTime
  categoryId  String?
  isRecurring Boolean           @default(false)
  frequency   ExpenseFrequency?
  notes       String?
  receiptUrl  String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  store       String?
  upiId       String?
  branch      String?
  personName  String?
  rawData     String?           @db.Text
  category    Category?         @relation(fields: [categoryId], references: [id])
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "expenses_categoryId_fkey")
  @@index([userId], map: "expenses_userId_fkey")
  @@map("expenses")
}

model Deadline {
  id             String             @id @default(cuid())
  title          String
  amount         Decimal?           @db.Decimal(10, 2)
  dueDate        DateTime
  isRecurring    Boolean            @default(false)
  frequency      DeadlineFrequency?
  status         DeadlineStatus     @default(PENDING)
  paymentMethod  String?
  accountDetails String?
  notes          String?
  userId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  category       String?
  completedDate  DateTime?
  description    String?
  isCompleted    Boolean            @default(false)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "deadlines_userId_fkey")
  @@map("deadlines")
}

model Goal {
  id            String       @id @default(cuid())
  title         String
  targetAmount  Decimal      @db.Decimal(10, 2)
  currentAmount Decimal      @default(0.00) @db.Decimal(10, 2)
  targetDate    DateTime?
  priority      GoalPriority @default(MEDIUM)
  category      String?
  description   String?
  imageUrl      String?
  isActive      Boolean      @default(true)
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "goals_userId_fkey")
  @@map("goals")
}

model WishlistItem {
  id            String           @id @default(cuid())
  title         String
  description   String?
  estimatedCost Decimal          @db.Decimal(10, 2)
  priority      WishlistPriority @default(MEDIUM)
  category      String?
  targetDate    DateTime?
  isCompleted   Boolean          @default(false)
  completedDate DateTime?
  imageUrl      String?
  notes         String?
  tags          String?
  userId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "wishlist_items_userId_fkey")
  @@map("wishlist_items")
}

model SalaryStructure {
  id            String          @id @default(cuid())
  jobTitle      String
  company       String
  baseSalary    Decimal         @db.Decimal(10, 2)
  allowances    String?
  deductions    String?
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean         @default(true)
  currency      String          @default("INR")
  location      String?
  department    String?
  grade         String?
  notes         String?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  salaryHistory SalaryHistory[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "salary_structures_userId_fkey")
  @@map("salary_structures")
}

model SalaryHistory {
  id                String           @id @default(cuid())
  salaryStructureId String
  jobTitle          String
  company           String
  baseSalary        Decimal          @db.Decimal(10, 2)
  allowances        String?
  deductions        String?
  effectiveDate     DateTime
  endDate           DateTime?
  currency          String           @default("INR")
  location          String?
  department        String?
  grade             String?
  changeType        SalaryChangeType
  changeReason      String?
  userId            String
  createdAt         DateTime         @default(now())
  salaryStructure   SalaryStructure  @relation(fields: [salaryStructureId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([salaryStructureId], map: "salary_history_salaryStructureId_fkey")
  @@index([userId], map: "salary_history_userId_fkey")
  @@map("salary_history")
}

model RecurringItem {
  id            String             @id @default(cuid())
  type          RecurringType
  title         String
  amount        Decimal            @db.Decimal(10, 2)
  frequency     RecurringFrequency
  startDate     DateTime
  endDate       DateTime?
  category      String?
  description   String?
  isActive      Boolean            @default(true)
  lastProcessed DateTime?
  nextDueDate   DateTime
  userId        String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "recurring_items_userId_fkey")
  @@map("recurring_items")
}

model NewsPreference {
  id        String   @id @default(cuid())
  keywords  String
  sources   String?
  frequency String   @default("daily")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "news_preferences_userId_fkey")
  @@map("news_preferences")
}

model NewsCache {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  source      String
  url         String
  publishedAt DateTime
  relevance   Float    @default(0)
  keywords    String
  createdAt   DateTime @default(now())

  @@map("news_cache")
}

model FinancialReport {
  id        String     @id @default(cuid())
  type      ReportType
  period    String
  data      String     @db.Text
  insights  String?    @db.Text
  userId    String
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "financial_reports_userId_fkey")
  @@map("financial_reports")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refresh_tokens_userId_fkey")
  @@map("refresh_tokens")
}

model Course {
  id          String           @id @default(cuid())
  title       String
  description String?
  category    String
  level       String
  duration    Int
  lessons     Int
  rating      Float            @default(0)
  isActive    Boolean          @default(true)
  imageUrl    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  progress    CourseProgress[]
  modules     Module[]

  @@map("courses")
}

model Module {
  id          String           @id @default(cuid())
  courseId    String
  title       String
  description String?
  content     String
  duration    Int
  order       Int
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  progress    ModuleProgress[]
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "modules_courseId_fkey")
  @@map("modules")
}

model CourseProgress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Float     @default(0)
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId], map: "course_progress_courseId_fkey")
  @@map("course_progress")
}

model ModuleProgress {
  id          String    @id @default(cuid())
  userId      String
  moduleId    String
  progress    Float     @default(0)
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([moduleId], map: "module_progress_moduleId_fkey")
  @@map("module_progress")
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum IncomeFrequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DeadlineFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DeadlineStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum WishlistPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SalaryChangeType {
  PROMOTION
  TRANSFER
  COMPANY_CHANGE
  LOCATION_CHANGE
  DEPARTMENT_CHANGE
  SALARY_REVISION
  OTHER
}

enum RecurringType {
  INCOME
  EXPENSE
  DEADLINE
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model UpiFieldMapping {
  id          String   @id @default(cuid())
  userId      String
  ruleName    String
  pattern     String   @db.Text
  fieldMap    String   @db.Text
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "upi_field_mappings_userId_fkey")
  @@map("upi_field_mappings")
}
